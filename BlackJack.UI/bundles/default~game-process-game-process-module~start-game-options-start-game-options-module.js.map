{"version":3,"sources":["webpack:///./src/app/game-process/game-process.component.css","webpack:///./src/app/game-process/game-process.component.html","webpack:///./src/app/game-process/game-process.component.ts","webpack:///./src/app/models/requestModels/request-bot-logic-game-view.ts","webpack:///./src/app/models/requestModels/request-find-winner-game-view.ts","webpack:///./src/app/models/requestModels/request-get-card-game-view.ts","webpack:///./src/app/models/requestModels/request-get-first-deal-game-view.ts","webpack:///./src/app/models/responseModels/response-game-process-game.model.ts","webpack:///./src/app/services/http-game-process.servise.ts"],"names":[],"mappings":"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","file":"default~game-process-game-process-module~start-game-options-start-game-options-module.js","sourcesContent":["module.exports = \".field {\\r\\n    margin-top: 150px;\\r\\n    width: 100%;\\r\\n    height: 70%;\\r\\n    min-height: 400px;\\r\\n    background-color: darkred;\\r\\n}\\r\\n.dealer{\\r\\n    position: absolute;\\r\\n    width: 100px;\\r\\n    padding: 5px;\\r\\n    top: 200px;\\r\\n    left:  47%;\\r\\n}\\r\\n.SelectAmountBots{\\r\\n    width: 100px;\\r\\n    height: 30px;\\r\\n    \\r\\n}\\r\\n.Score{\\r\\n    font-weight: bold;\\r\\n}\\r\\n.Hand{\\r\\n    font-weight: bold;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"text-center container \\\">\\r\\n\\r\\n    <h2>Player Name: {{model?.player.name}}</h2>\\r\\n\\r\\n    <h3>{{model?.round.winner}}</h3>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-6\\\">\\r\\n            <h3>Game Number: {{model?.game.gameNumber}}</h3>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-6\\\">\\r\\n            <h3>Round Number: {{model?.round.roundNumber}}</h3>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"field text-center\\\">\\r\\n        <img src=\\\"/Content/Img/bj.jpg\\\" alt=\\\"Alternate Text\\\" />\\r\\n    </div>\\r\\n    \\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n    <div class=\\\"player col-md-2\\\">\\r\\n        <p><span *ngFor=\\\"let card of model?.player.playerRoundHand.hand\\\">{{card.name}} {{card.suit}}, </span> </p>\\r\\n        <p>{{model?.player.playerRoundHand.score}}</p>\\r\\n        <h4>{{model?.player.name}}</h4>\\r\\n    </div>\\r\\n    <hr>\\r\\n\\r\\n    <div *ngFor=\\\"let bot of model?.bots \\\" class=\\\"player col-md-2\\\">\\r\\n        <p><span *ngFor=\\\"let card of bot?.playerRoundHand.hand\\\">{{card.name}} {{card.suit}},</span> </p>\\r\\n        <p>{{bot.playerRoundHand.score}}</p>\\r\\n        <h4>{{bot.name}}</h4>\\r\\n    </div>\\r\\n    <hr>\\r\\n</div>\\r\\n    <div class=\\\"dealer col-md-2\\\">\\r\\n        <h4>{{model?.dealer.name}}</h4>\\r\\n        <p>{{model?.dealer.playerRoundHand.score}}</p>\\r\\n        <p><span *ngFor=\\\"let card of model?.dealer.playerRoundHand.hand\\\">{{card.name}} {{card.suit}},</span></p>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"text-right\\\">\\r\\n        <button kendoButton (click)=\\\"getFirstDealClick()\\\">Start Game</button>\\r\\n        <button kendoButton (click)=\\\"getCardClick()\\\">Get Card</button>\\r\\n        <button kendoButton (click)=\\\"getWinner()\\\">Stop</button>\\r\\n        <button kendoButton (click)=\\\"newRound()\\\">End Round</button>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { ResponseGameProcessGameView } from 'src/app/models/responseModels/response-game-process-game.model';\nimport { HttpGameProcessService } from 'src/app/services/http-game-process.servise';\nimport { RequestGetCardGameView } from 'src/app/models/requestModels/request-get-card-game-view';\nimport { ResponseGetCardGameView } from 'src/app/models/responseModels/response-get-card-game.model';\nimport { RequestGetFirstDealGameView } from 'src/app/models/requestModels/request-get-first-deal-game-view';\nimport { ResponseGetFirstDealGameView } from 'src/app/models/responseModels/response-get-first-deal-game.model';\nimport { RequestBotLogicGameView } from 'src/app/models/requestModels/request-bot-logic-game-view';\nimport { ResponseBotLogicGameView } from 'src/app/models/responseModels/response-bot-logic-game.model';\nimport { RequestFindWinnerGameView } from 'src/app/models/requestModels/request-find-winner-game-view';\nimport { ResponseFindWinnerGameView } from 'src/app/models/responseModels/response-find-winner-game.model';\nimport { ResponseNewRoundGameView } from '../models/responseModels/response-new-round-game.model';\n\n@Component({\n    selector: 'app-game-process',\n    templateUrl: './game-process.component.html',\n    styleUrls: ['./game-process.component.css']\n})\n\nexport class GameProcessComponent implements OnInit {\n    @Input() model: ResponseGameProcessGameView;\n    getCardRequest: RequestGetCardGameView = new RequestGetCardGameView();\n    getFirstDealRequest: RequestGetFirstDealGameView = new RequestGetFirstDealGameView();\n    getBotAndDealerLogicRequest: RequestBotLogicGameView = new RequestBotLogicGameView();\n    findWinner: RequestFindWinnerGameView = new RequestFindWinnerGameView();\n\n    constructor(private service: HttpGameProcessService) { }\n    ngOnInit() {\n    }\n\n    addGetCardRequest() {\n        this.getCardRequest.hand = this.model.player.playerRoundHand;\n        this.getCardRequest.round = this.model.round;\n    }\n\n    addFirstDealRequest() {\n        this.getFirstDealRequest.hands = this.getAllHands();\n        this.getFirstDealRequest.round = this.model.round;\n    }\n\n    newRound(){\n        this.service.httpNewRound(this.model).subscribe((data: ResponseNewRoundGameView) => this.model = data);\n        }\n    getCardClick() {\n        this.addGetCardRequest();\n        this.service.httpGetCard(this.getCardRequest).subscribe((data: ResponseGetCardGameView) => this.model.player.playerRoundHand = data.hand);\n    }\n\n    getFirstDealClick() {\n        this.addFirstDealRequest();\n        this.service.httpGetFirstDeal(this.getFirstDealRequest).subscribe((data: ResponseGetFirstDealGameView) => this.addFirstDealResponse(data));\n    }\n\n    getBotAndDealerLogic(count: number) {\n        this.service.httpGetBotAndDealerLogic(this.addBotAndDealerRequest(count)).subscribe((data: ResponseBotLogicGameView) => this.getHand(count).playerRoundHand = data.hand)\n    }\n\n    addFindWinnerRequest() {\n        this.findWinner.dealerHand = this.model.dealer.playerRoundHand;\n        this.findWinner.playerHand = this.model.player.playerRoundHand;\n        return this.findWinner;\n    }\n    getWinner() {\n        this.useLogicOnBotAndDealer();\n        this.service.httpGetWinner(this.addFindWinnerRequest()).subscribe((data: ResponseFindWinnerGameView) => this.model.round = data.round)\n    }\n\n    getHand(count) {\n        if (count < this.model.bots.length) {\n            return this.model.bots[count];\n        }\n        if (count == this.model.bots.length) {\n            return this.model.dealer;\n        }\n    }\n\n    useLogicOnBotAndDealer() {\n        for (var i = 0; i <= this.model.bots.length; i++) {\n            this.getBotAndDealerLogic(i);\n        }\n    }\n\n    addBotAndDealerRequest(count: number) {\n        var hand;\n        if (count < this.model.bots.length) {\n            hand = this.model.bots[count].playerRoundHand;\n        }\n        if (count == this.model.bots.length) {\n            hand = this.model.dealer.playerRoundHand;\n        }\n        this.getBotAndDealerLogicRequest.round = this.model.round;\n        this.getBotAndDealerLogicRequest.hand = hand;\n        return this.getBotAndDealerLogicRequest;\n    }\n\n    addFirstDealResponse(data) {\n        debugger;\n        for (var i = 0; i < data.hands.length; i++) {\n            if (i == 0) {\n                this.model.player.playerRoundHand = data.hands[i];\n            }\n\n            if (i == data.hands.length - 1) {\n                this.model.dealer.playerRoundHand = data.hands[i];\n            }\n\n            if (i != 0 && i != data.hands.length-1) {\n                this.model.bots[i - 1].playerRoundHand = data.hands[i];\n            }\n        }\n    }\n\n    getAllHands() {\n        var Hands = new Array();\n        Hands.push(this.model.dealer.playerRoundHand);\n        Hands.push(this.model.player.playerRoundHand);\n        for (var i = 0; i < this.model.bots.length; i++) {\n            Hands.push(this.model.bots[i].playerRoundHand);\n        }\n        return Hands\n    }\n}\n","export class RequestBotLogicGameView {\r\n    round: RoundRoundHandBotLogicGameViewItem;\r\n    hand: PlayerRoundHandBotLogicGameViewItem;\r\n}\r\n\r\nexport class PlayerRoundHandBotLogicGameViewItem {\r\n    id: number;\r\n    hand: CardBotLogicGameViewItem[];\r\n    score: number;\r\n    playerId: number;\r\n}\r\n\r\nexport class CardBotLogicGameViewItem {\r\n    id: number;\r\n    name: string;\r\n    suit: string;\r\n    imgPath: string;\r\n}\r\n\r\nexport class RoundRoundHandBotLogicGameViewItem {\r\n    id: number;\r\n}\r\n","export class RequestFindWinnerGameView {\r\n    playerHand: PlayerRoundHandFindWinnerGameViewItem;\r\n    dealerHand: PlayerRoundHandFindWinnerGameViewItem;\r\n}\r\nexport class PlayerRoundHandFindWinnerGameViewItem {\r\n    id: number;\r\n    score: number;\r\n    playerId: number;\r\n    roundId: number;\r\n}\r\n","export class RequestGetCardGameView {\r\n    round: RoundRoundHandGetCardGameViewItem;\r\n    hand: PlayerRoundHandGetCardGameViewItem;\r\n}\r\n\r\nexport class PlayerRoundHandGetCardGameViewItem {\r\n    id: number;\r\n    hand: CardGetCardGameViewItem[];\r\n    score: number;\r\n    playerId: number;\r\n}\r\n\r\nexport class CardGetCardGameViewItem {\r\n    id: number;\r\n    name: string;\r\n    suit: string;\r\n    imgPath: string;\r\n}\r\n\r\nexport class RoundRoundHandGetCardGameViewItem {\r\n    id: number;\r\n}\r\n","export class RequestGetFirstDealGameView {\r\n    round: RoundRoundHandGetFirstDealGameViewItem;\r\n    hands: PlayerRoundHandGetFirstDealGameViewItem[];\r\n}\r\n\r\nexport class PlayerRoundHandGetFirstDealGameViewItem {\r\n    id: number;\r\n    hand: CardGetFirstDealGameViewItem[];\r\n    score: number;\r\n    playerId: number;\r\n}\r\n\r\nexport class CardGetFirstDealGameViewItem {\r\n    id: number;\r\n    name: string;\r\n    suit: string;\r\n    imgPath: string;\r\n}\r\n\r\nexport class RoundRoundHandGetFirstDealGameViewItem {\r\n    id: number;\r\n}\r\n","export class ResponseGameProcessGameView {\r\n    game: GameGameProcessGameViewItem;\r\n    round: RoundGameProcessGameViewItem;\r\n    player: PlayerGameProcessGameViewItem;\r\n    dealer: PlayerGameProcessGameViewItem;\r\n    bots: PlayerGameProcessGameViewItem[];\r\n}\r\n\r\nexport class PlayerGameProcessGameViewItem {\r\n    id: number;\r\n    name: string;\r\n    role: number;\r\n    playerRoundHand: PlayerRoundHandGameProcessGameViewItem;\r\n}\r\n\r\nexport class PlayerRoundHandGameProcessGameViewItem {\r\n    id: number;\r\n    hand: CardGameProcessGameViewItem[];\r\n    score: number;\r\n    playerId: number;\r\n    roundId: number;\r\n}\r\n\r\nexport class CardGameProcessGameViewItem {\r\n    id: number;\r\n    name: string;\r\n    suit: string;\r\n    imgPath: string;\r\n}\r\n\r\nexport class GameGameProcessGameViewItem {\r\n    id: number;\r\n    gameNumber: number;\r\n}\r\n\r\nexport class RoundGameProcessGameViewItem {\r\n    id: number;\r\n    roundNumber: number;\r\n    winner: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { RequestGetCardGameView } from 'src/app/models/requestModels/request-get-card-game-view';\r\nimport { RequestGetFirstDealGameView } from 'src/app/models/requestModels/request-get-first-deal-game-view';\r\nimport { RequestBotLogicGameView } from 'src/app/models/requestModels/request-bot-logic-game-view';\r\nimport { RequestFindWinnerGameView } from 'src/app/models/requestModels/request-find-winner-game-view';\r\nimport { RequestNewRoundGameView } from 'src/app/models/requestModels/request-new-round.view'\r\n\r\n@Injectable()\r\nexport class HttpGameProcessService {\r\n    private urlGetCard = '/Game/GetCard';\r\n    private urlGetFirstDeal = 'Game/GetFirstDeal';\r\n    private urlGetBotLogic = 'Game/BotAndDealerLogic';\r\n    private urlGetWinner = 'Game/FindWinner';\r\n    private urlGetNewRound = 'Game/NewRound';\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    httpGetCard(model: RequestGetCardGameView) {\r\n        return this.http.post(this.urlGetCard, model);\r\n    }\r\n\r\n    httpGetFirstDeal(model: RequestGetFirstDealGameView) {\r\n        return this.http.post(this.urlGetFirstDeal, model);\r\n    }\r\n\r\n    httpGetBotAndDealerLogic(model: RequestBotLogicGameView) {\r\n        return this.http.post(this.urlGetBotLogic, model);\r\n    }\r\n\r\n    httpGetWinner(model: RequestFindWinnerGameView) {\r\n        return this.http.post(this.urlGetWinner, model);\r\n    }\r\n\r\n    httpNewRound(model: RequestNewRoundGameView){\r\n        return this.http.post(this.urlGetNewRound, model);\r\n    }\r\n}\r\n"],"sourceRoot":""}